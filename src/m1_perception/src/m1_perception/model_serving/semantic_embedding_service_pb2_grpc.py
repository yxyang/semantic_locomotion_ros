# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from m1_perception.model_serving import semantic_embedding_service_pb2 as m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2


class SemanticEmbeddingStub(object):
    """service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSpeedEstimation = channel.unary_unary(
                '/SemanticEmbedding/GetSpeedEstimation',
                request_serializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
                response_deserializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
                )
        self.GetSemanticSegmentation = channel.unary_unary(
                '/SemanticEmbedding/GetSemanticSegmentation',
                request_serializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
                response_deserializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
                )


class SemanticEmbeddingServicer(object):
    """service
    """

    def GetSpeedEstimation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSemanticSegmentation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SemanticEmbeddingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSpeedEstimation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpeedEstimation,
                    request_deserializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
                    response_serializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
            ),
            'GetSemanticSegmentation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSemanticSegmentation,
                    request_deserializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
                    response_serializer=m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SemanticEmbedding', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SemanticEmbedding(object):
    """service
    """

    @staticmethod
    def GetSpeedEstimation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SemanticEmbedding/GetSpeedEstimation',
            m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
            m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSemanticSegmentation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SemanticEmbedding/GetSemanticSegmentation',
            m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.SerializeToString,
            m1__perception_dot_model__serving_dot_semantic__embedding__service__pb2.B64Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
