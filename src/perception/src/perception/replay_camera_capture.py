#!/usr/bin/env python
"""Example for fake camera image generated by replaying frames."""
import itertools
import os
import time

from absl import app
from absl import flags

import cv2
import numpy as np
import rospy
from sensor_msgs.msg import CompressedImage
from PIL import Image

flags.DEFINE_string('image_dir',
                    ('/home/yxyang/research/semantic_locomotion_ros/logs/'
                     'full_outdoor_tx2/ghost_memory'),
                    'where the images are stored.')
flags.DEFINE_integer('frame_width', 640, 'frame width.')
flags.DEFINE_integer('frame_height', 360, 'frame height.')
flags.DEFINE_integer('frame_rate', 6, 'frame rate.')
FLAGS = flags.FLAGS


def main(_):
  camera_image_publisher = rospy.Publisher(
      '/perception/camera_image/compressed', CompressedImage, queue_size=1)
  rospy.init_node('realsense_camera_capture', anonymous=True)
  rate = rospy.Rate(FLAGS.frame_rate)

  filelist = sorted(list(os.listdir(FLAGS.image_dir)))
  file_iter = itertools.cycle(filelist)
  time.sleep(5)

  while not rospy.is_shutdown():
    filename = next(file_iter)
    image = Image.open(os.path.join(FLAGS.image_dir, filename))
    image = np.array(image, dtype=np.uint8)
    image = cv2.resize(image, dsize=(FLAGS.frame_width, FLAGS.frame_height))
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    msg = CompressedImage()
    msg.header.stamp = rospy.Time.now()
    msg.format = "png"
    msg.data = np.array(cv2.imencode(".png", image)[1]).tostring()
    camera_image_publisher.publish(msg)
    rate.sleep()


if __name__ == "__main__":
  app.run(main)
